package {{ .Pkg }}_test

import (
	"testing"

	"github.com/ibrt/golang-bites/numeric/{{ .Pkg }}"

	"github.com/stretchr/testify/require"
)

func TestPtr(t *testing.T) {
	p := {{ .Pkg }}.Ptr(0)
	require.NotNil(t, p)
	require.Equal(t, {{ .Type }}(0), *p)
}

func TestPtrZeroToNil(t *testing.T) {
	p := {{ .Pkg }}.PtrZeroToNil(0)
	require.Nil(t, p)
	p = {{ .Pkg }}.PtrZeroToNil(1)
	require.NotNil(t, p)
	require.Equal(t, {{ .Type }}(1), *p)
}

func TestPtrDefToNil(t *testing.T) {
	p := {{ .Pkg }}.PtrDefToNil(1, 1)
	require.Nil(t, p)
	p = {{ .Pkg }}.PtrDefToNil(1, 0)
	require.NotNil(t, p)
	require.Equal(t, {{ .Type }}(1), *p)
}

func TestVal(t *testing.T) {
	require.Equal(t, {{ .Type }}(0), {{ .Pkg }}.Val(nil))
	require.Equal(t, {{ .Type }}(0), {{ .Pkg }}.Val({{ .Pkg }}.Ptr(0)))
	require.Equal(t, {{ .Type }}(1), {{ .Pkg }}.Val({{ .Pkg }}.Ptr(1)))
}

func TestValDef(t *testing.T) {
	require.Equal(t, {{ .Type }}(1), {{ .Pkg }}.ValDef(nil, 1))
	require.Equal(t, {{ .Type }}(0), {{ .Pkg }}.ValDef({{ .Pkg }}.Ptr(0), 1))
	require.Equal(t, {{ .Type }}(1), {{ .Pkg }}.ValDef({{ .Pkg }}.Ptr(1), 1))
}

func TestParse(t *testing.T) {
	v, err := {{ .Pkg }}.Parse("10")
	require.NoError(t, err)
	require.Equal(t, {{ .Type }}(10), v)
	_, err = {{ .Pkg }}.Parse("")
	require.Error(t, err)
	_, err = {{ .Pkg }}.Parse("A")
	require.Error(t, err)
}

func TestMustParse(t *testing.T) {
	require.NotPanics(t, func() { require.Equal(t, {{ .Type }}(10), {{ .Pkg }}.MustParse("10")) })
	require.Panics(t, func() { {{ .Pkg }}.MustParse("") })
	require.Panics(t, func() { {{ .Pkg }}.MustParse("A") })
}

func TestSlice(t *testing.T) {
	s := {{ .Pkg }}.Slice{2, 0, 3, 1, 3}
	require.Equal(t, 5, s.Len())
	require.True(t, s.Less(1, 0))
	require.False(t, s.Less(2, 4))
	require.False(t, s.Less(0, 1))
	s.Swap(0, 1)
	require.Equal(t, {{ .Pkg }}.Slice{0, 2, 3, 1, 3}, s)
}

func TestSliceToMap(t *testing.T) {
	require.Equal(t, map[{{ .Type }}]struct{}{}, {{ .Pkg }}.SliceToMap(nil))
	require.Equal(t, map[{{ .Type }}]struct{}{}, {{ .Pkg }}.SliceToMap([]{{ .Type }}{}))
	require.Equal(t, map[{{ .Type }}]struct{}{1: {}}, {{ .Pkg }}.SliceToMap([]{{ .Type }}{1}))
	require.Equal(t, map[{{ .Type }}]struct{}{1: {}, 2: {}}, {{ .Pkg }}.SliceToMap([]{{ .Type }}{1, 2}))
	require.Equal(t, map[{{ .Type }}]struct{}{1: {}, 2: {}}, {{ .Pkg }}.SliceToMap([]{{ .Type }}{1, 1, 2, 2}))
}

func TestMapToSlice(t *testing.T) {
	require.Equal(t, []{{ .Type }}{}, {{ .Pkg }}.MapToSlice(nil))
	require.Equal(t, []{{ .Type }}{}, {{ .Pkg }}.MapToSlice(map[{{ .Type }}]struct{}{}))
	require.Equal(t, []{{ .Type }}{1}, {{ .Pkg }}.MapToSlice(map[{{ .Type }}]struct{}{1: {}}))
	require.Equal(t, map[{{ .Type }}]struct{}{1: {}, 2: {}}, {{ .Pkg }}.SliceToMap({{ .Pkg }}.MapToSlice(map[{{ .Type }}]struct{}{1: {}, 2: {}})))
}

func TestSafeIndex(t *testing.T) {
	require.Equal(t, {{.Type}}(0), {{ .Pkg }}.SafeIndex(nil, 0))
	require.Equal(t, {{.Type}}(0), {{ .Pkg }}.SafeIndex(nil, 1))
	require.Equal(t, {{.Type}}(0), {{ .Pkg }}.SafeIndex(nil, -1))
	require.Equal(t, {{.Type}}(0), {{ .Pkg }}.SafeIndex([]{{.Type}}{}, 0))
	require.Equal(t, {{.Type}}(0), {{ .Pkg }}.SafeIndex([]{{.Type}}{}, 1))
	require.Equal(t, {{.Type}}(0), {{ .Pkg }}.SafeIndex([]{{.Type}}{}, -1))
	require.Equal(t, {{.Type}}(1), {{ .Pkg }}.SafeIndex([]{{.Type}}{1}, 0))
	require.Equal(t, {{.Type}}(0), {{ .Pkg }}.SafeIndex([]{{.Type}}{1}, 1))
	require.Equal(t, {{.Type}}(0), {{ .Pkg }}.SafeIndex([]{{.Type}}{1}, -1))
}

func TestSafeIndexDef(t *testing.T) {
	require.Equal(t, {{.Type}}(100), {{ .Pkg }}.SafeIndexDef(nil, 0, 100))
	require.Equal(t, {{.Type}}(100), {{ .Pkg }}.SafeIndexDef(nil, 1, 100))
	require.Equal(t, {{.Type}}(100), {{ .Pkg }}.SafeIndexDef(nil, -1, 100))
	require.Equal(t, {{.Type}}(100), {{ .Pkg }}.SafeIndexDef([]{{.Type}}{}, 0, 100))
	require.Equal(t, {{.Type}}(100), {{ .Pkg }}.SafeIndexDef([]{{.Type}}{}, 1, 100))
	require.Equal(t, {{.Type}}(100), {{ .Pkg }}.SafeIndexDef([]{{.Type}}{}, -1, 100))
	require.Equal(t, {{.Type}}(1), {{ .Pkg }}.SafeIndexDef([]{{.Type}}{1}, 0, 100))
	require.Equal(t, {{.Type}}(100), {{ .Pkg }}.SafeIndexDef([]{{.Type}}{1}, 1, 100))
	require.Equal(t, {{.Type}}(100), {{ .Pkg }}.SafeIndexDef([]{{.Type}}{1}, -1, 100))
}

func TestSafeIndexPtr(t *testing.T) {
	require.Nil(t, {{ .Pkg }}.SafeIndexPtr(nil, 0))
	require.Nil(t, {{ .Pkg }}.SafeIndexPtr(nil, 1))
	require.Nil(t, {{ .Pkg }}.SafeIndexPtr(nil, -1))
	require.Nil(t, {{ .Pkg }}.SafeIndexPtr([]{{.Type}}{}, 0))
	require.Nil(t, {{ .Pkg }}.SafeIndexPtr([]{{.Type}}{}, 1))
	require.Nil(t, {{ .Pkg }}.SafeIndexPtr([]{{.Type}}{}, -1))
	require.Equal(t, {{ .Pkg }}.Ptr(1), {{ .Pkg }}.SafeIndexPtr([]{{.Type}}{1}, 0))
	require.Nil(t, {{ .Pkg }}.SafeIndexPtr([]{{.Type}}{1}, 1))
	require.Nil(t, {{ .Pkg }}.SafeIndexPtr([]{{.Type}}{1}, -1))
}
